import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

class TicketBookingSystem {
    private int availableSeats = 10; // Total available seats
    private Lock lock = new ReentrantLock(); // Lock for thread synchronization

    public void bookTicket(String customerName) {
        lock.lock(); // Acquire the lock
        try {
            if (availableSeats > 0) {
                System.out.println(customerName + " booked a seat. Seats left: " + (availableSeats - 1));
                availableSeats--; // Decrease available seats
            } else {
                System.out.println("No seats available for " + customerName);
            }
        } finally {
            lock.unlock(); // Release the lock
        }
    }
}

class BookingThread extends Thread {
    private TicketBookingSystem bookingSystem;
    private String customerName;

    public BookingThread(TicketBookingSystem bookingSystem, String customerName) {
        this.bookingSystem = bookingSystem;
        this.customerName = customerName;
    }

    @Override
    public void run() {
        bookingSystem.bookTicket(customerName); // Attempt to book a ticket
    }
}

public class TicketBookingApp {
    public static void main(String[] args) {
        TicketBookingSystem bookingSystem = new TicketBookingSystem();

        // Create VIP customers with high priority
        BookingThread vip1 = new BookingThread(bookingSystem, "VIP Customer 1");
        BookingThread vip2 = new BookingThread(bookingSystem, "VIP Customer 2");
        vip1.setPriority(Thread.MAX_PRIORITY);
        vip2.setPriority(Thread.MAX_PRIORITY);

        // Create regular customers with normal priority
        BookingThread regular1 = new BookingThread(bookingSystem, "Regular Customer 1");
        BookingThread regular2 = new BookingThread(bookingSystem, "Regular Customer 2");

        // Start threads
        vip1.start();
        vip2.start();
        regular1.start();
        regular2.start();
    }
}
